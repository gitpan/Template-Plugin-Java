// Generated database class.
[% USE Java %]
[% USE JavaSQL %]

package $package;

import java.sql.*;
import java.util.Vector;
import java.util.Enumeration;
import java.io.DataOutputStream;
import java.io.IOException;
import nebula.xml.XmlElement;

public class	$class
[% IF parent %]
extends		$parent
[% END %]
[% IF interface.size %]
implements	[% FOREACH i = interface %]
		,$i
		[% END %]
[% END %]
{
Connection		myConnection;

PreparedStatement	mySelect;

[% IF JavaSQL.tableCount == 1 %]
PreparedStatement	myInsert;
PreparedStatement	myDelete;
PreparedStatement	myUpdate;
[% END %]

ResultSet		myResults;

boolean			amNew = false;


[% INCLUDE DataDeclarations.template %]
public $class (Connection connection
[%- FOREACH JavaSQL.columns -%]
, $type $varName
[% END %])
throws SQLException
{
	myConnection	= connection;
[% FOREACH JavaSQL.columns %]
	this.$varName	= $varName;
[% END %]
	amNew = true;
	prepareStatements();
	find();
}

public $class(Connection connection)
throws SQLException
{
	myConnection = connection;
	amNew = true;
	prepareStatements();
}

[% INCLUDE DataAccess.template %]
public void find()
throws SQLException
{
[% IF variables.maxRows %]
	// set this prior to all queries.
	mySelect.setMaxRows(maxRows);
[% END %]

	// only set on paramaterized queries
	// TODO: set parameterized queries

	myResults = mySelect.executeQuery();
}

public boolean next()
throws SQLException
{
	if (myResults == null) { find(); }
	reset();
	if (!myResults.next()) { return false; }
[% FOREACH JavaSQL.columns %]
	$varName	= myResults.get$capType($position);
[% END %]
	amNew = false;
	return true;
}
[% IF JavaSQL.tableCount == 1 %]
public void store()
throws SQLException
{
	PreparedStatement stmt;
	if (amNew) {
		stmt = myInsert;
	} else {
		stmt = myUpdate;
	}

[% FOREACH JavaSQL.columns %]
	[% # this may need to do a setNull if necessary %]
	stmt.set$capType($position, $varName);
[% END %]
[% FOREACH JavaSQL.columns %]
	stmt.set$capType([% JavaSQL.columnCount + position %], myResults.get$capType($position));
[% END %]
	stmt.executeUpdate();
	amNew = false;
}

public void remove()
throws SQLException
{
[% FOREACH JavaSQL.columns %]
	myDelete.set$capType($position, $varName);
[% END %]
[% FOREACH JavaSQL.columns %]
	myDelete.set$capType([% JavaSQL.columnCount + position %], myResults.get$capType($position));
[% END %]
	myDelete.executeUpdate();
	reset();
}
[% END %]
public void reset()
{
[% FOREACH JavaSQL.columns %]
	$varName = $initializer;
[% END %]
	amNew = true;
}

void prepareStatements()
throws SQLException
{
	mySelect	= myConnection.prepareStatement(
"select [% JavaSQL.columnNames.join(", ") %] from [% JavaSQL.tables.join(", ") %]
[%- IF JavaSQL.where -%]
 where [% JavaSQL.where %] 
[% END %]
[%- IF JavaSQL.order -%]
order by [% JavaSQL.order %]
[% END %]"
	);

[% IF variables.maxRows %]
// Use default from xml spec.
	maxRows = variables.maxRows;
[% END %]
[% IF JavaSQL.tableCount == 1 %]
	myInsert	= myConnection.prepareStatement(
"insert into [% JavaSQL.tables.first %] ( [% JavaSQL.columnNames.join(", ") %] ) values ( 
[%- PERL -%]
# Make a string with the right number of ?, ?, ?, ... ?
substr ('?, ' x [% JavaSQL.columnNames.size %], 0, -2)
[% END %])"
	);

	myUpdate = myConnection.prepareStatement(
"update [% JavaSQL.tables.first %] set
[%- FOREACH JavaSQL.columns -%]
 $name = ?
[% END %] where
[%- FOREACH JavaSQL.columns -%]
 $name = ?
[% END %]"
	);

	myDelete = myConnection.prepareStatement(
"delete from [% JavaSQL.tables.first %] where
[%- FOREACH JavaSQL.columns -%]
 $name = ?
[% END %]"
	);
[% END %]
}


[% INCLUDE XMLEncode.template  %]

[% INCLUDE AddElement.template %]

$append

} // End class ${class}.
